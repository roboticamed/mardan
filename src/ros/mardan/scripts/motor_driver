#!/usr/bin/env python3

import smbus
import rospy
from geometry_msgs.msg import Twist

######################################################################
# I2C Communication

bus = None
address = None


def int_to_bytes_array(value):
    result = []
    intBytes = 2
    mask = 0xFF

    for i in range(0, intBytes):
        result.insert(0, value & mask)
        value >>= 8

    return result


def init_i2c_bus(i2c_address=0x11):
    global bus
    global address
    bus = smbus.SMBus(1)
    address = i2c_address


def _send_values(value):
    bus.write_i2c_block_data(address, 0, value)
    return -1


def send_speed(speed_l, speed_r, log=False):
    var_l = int_to_bytes_array(speed_l)
    var_r = int_to_bytes_array(speed_r)

    values = var_l + var_r

    _send_values(values)
    if log:
        print("RPI: Hi Arduino, I sent you" + str(values))

    return values

######################################################################
# ROS Node


class MotorController:
    def __init__(self):
        self.sub = rospy.Subscriber("motors/motor_twist", Twist, self.callback)
        self.vel_max = 200
        init_i2c_bus()

    def callback(self, twist):
        l_val = int((twist.linear.x - twist.angular.z)*self.vel_max/2)
        r_val = int((twist.linear.x + twist.angular.z)*self.vel_max/2)
        send_speed(l_val, r_val)


def main():
    rospy.init_node('motor_driver')
    obc = MotorController()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")


if __name__ == '__main__':
    main()
