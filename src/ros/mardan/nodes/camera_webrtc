#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2

import threading

import numpy as np

import asyncio
import logging
import ssl
import argparse
import json
import os
import platform

from aiohttp import web
from aiortc import RTCPeerConnection, RTCSessionDescription, VideoStreamTrack
from aiortc.contrib.media import MediaPlayer, MediaRelay
from aiortc.rtcrtpsender import RTCRtpSender

from av import VideoFrame

ROOT = os.path.dirname(__file__)


relay = None
webcam = None

HTML_CONTENT = """
<html>
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebRTC webcam</title>
    <style>
    button {
        padding: 8px 16px;
    }

    video {
        width: 100%;
    }

    .option {
        margin-bottom: 8px;
    }

    #media {
        max-width: 1280px;
    }
    </style>
</head>
<body>

<div class="option">
    <input id="use-stun" type="checkbox"/>
    <label for="use-stun">Use STUN server</label>
</div>
<button id="start" onclick="start()">Start</button>
<button id="stop" style="display: none" onclick="stop()">Stop</button>

<div id="media">
    <h2>Media</h2>

    <audio id="audio" autoplay="true"></audio>
    <video id="video" autoplay="true" playsinline="true"></video>
</div>

<script src="client.js"></script>
</body>
</html>
"""

JAVASCRIPT_CODE = """
var pc = null;

function negotiate() {
    pc.addTransceiver('video', {direction: 'recvonly'});
    pc.addTransceiver('audio', {direction: 'recvonly'});
    return pc.createOffer().then(function(offer) {
        return pc.setLocalDescription(offer);
    }).then(function() {
        // wait for ICE gathering to complete
        return new Promise(function(resolve) {
            if (pc.iceGatheringState === 'complete') {
                resolve();
            } else {
                function checkState() {
                    if (pc.iceGatheringState === 'complete') {
                        pc.removeEventListener('icegatheringstatechange', checkState);
                        resolve();
                    }
                }
                pc.addEventListener('icegatheringstatechange', checkState);
            }
        });
    }).then(function() {
        var offer = pc.localDescription;
        return fetch('/offer', {
            body: JSON.stringify({
                sdp: offer.sdp,
                type: offer.type,
            }),
            headers: {
                'Content-Type': 'application/json'
            },
            method: 'POST'
        });
    }).then(function(response) {
        return response.json();
    }).then(function(answer) {
        return pc.setRemoteDescription(answer);
    }).catch(function(e) {
        alert(e);
    });
}

function start() {
    var config = {
        sdpSemantics: 'unified-plan'
    };

    if (document.getElementById('use-stun').checked) {
        config.iceServers = [{urls: ['stun:stun.l.google.com:19302']}];
    }

    pc = new RTCPeerConnection(config);

    // connect audio / video
    pc.addEventListener('track', function(evt) {
        if (evt.track.kind == 'video') {
            document.getElementById('video').srcObject = evt.streams[0];
        } else {
            document.getElementById('audio').srcObject = evt.streams[0];
        }
    });

    document.getElementById('start').style.display = 'none';
    negotiate();
    document.getElementById('stop').style.display = 'inline-block';
}

function stop() {
    document.getElementById('stop').style.display = 'none';

    // close peer connection
    setTimeout(function() {
        pc.close();
    }, 500);
}
"""


class SimpleVideoStreamTrack(VideoStreamTrack):
    """
    A simple video stream track
    """

    def __init__(self):
        super().__init__()  # don't forget this!

    async def recv(self):

        ndarr = np.zeros((240, 320, 3), dtype=np.uint8)
        ndarr[..., 1] = 255

        pts, time_base = await self.next_timestamp()
        frame = VideoFrame.from_ndarray(ndarr)
        frame.pts = pts
        frame.time_base = time_base
        return frame


class RosImageTopicVideoTrack(VideoStreamTrack):

    def __init__(self, topic, size):
        super().__init__()

        self.__subscriber = rospy.Subscriber(
            topic, Image, self.__topic_callback)

        self.__cv_bridge = CvBridge()

        self.__img_lock = threading.Lock()
        self.__img_buffer = np.zeros((size[0], size[1], 3), dtype=np.uint8)
        self.__imgsize = size

    async def recv(self):

        pts, time_base = await self.next_timestamp()

        with self.__img_lock:
            frame = VideoFrame.from_ndarray(self.__img_buffer)

        frame.pts = pts
        frame.time_base = time_base
        return frame

    def __topic_callback(self, msg):

        img = self.__cv_bridge.imgmsg_to_cv2(msg)
        img = cv2.resize(img, (self.__imgsize[1], self.__imgsize[0]))
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        with self.__img_lock:
            self.__img_buffer[...] = img[...]


async def index(request):
    """
    Serve index.html
    """
    global HTML_CONTENT
    return web.Response(content_type="text/html", text=HTML_CONTENT)


async def javascript(request):
    """
    serve javascript client code
    """
    global JAVASCRIPT_CODE
    return web.Response(content_type="application/javascript", text=JAVASCRIPT_CODE)


async def offer(request):
    params = await request.json()
    offer = RTCSessionDescription(sdp=params["sdp"], type=params["type"])

    pc = RTCPeerConnection()
    pcs.add(pc)

    @pc.on("connectionstatechange")
    async def on_connectionstatechange():
        print("Connection state is %s" % pc.connectionState)
        if pc.connectionState == "failed":
            await pc.close()
            pcs.discard(pc)

    # add a video track to the peer connection
    # pc.addTrack(SimpleVideoStreamTrack())
    pc.addTrack(RosImageTopicVideoTrack('camera/BGR/raw', (240, 320)))

    await pc.setRemoteDescription(offer)

    answer = await pc.createAnswer()
    await pc.setLocalDescription(answer)

    return web.Response(
        content_type="application/json",
        text=json.dumps(
            {"sdp": pc.localDescription.sdp, "type": pc.localDescription.type}
        ),
    )


pcs = set()


async def on_shutdown(app):
    # close peer connections
    coros = [pc.close() for pc in pcs]
    await asyncio.gather(*coros)
    pcs.clear()


if __name__ == "__main__":

    rospy.init_node('camera_webrtc')

    app = web.Application()
    app.on_shutdown.append(on_shutdown)
    app.router.add_get("/", index)
    app.router.add_get("/client.js", javascript)
    app.router.add_post("/offer", offer)
    web.run_app(app, host='0.0.0.0', port=8080, ssl_context=None)
