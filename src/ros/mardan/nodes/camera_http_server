#!/usr/bin/env python3

import rospy

import threading

from sensor_msgs.msg import CompressedImage


from http.server import BaseHTTPRequestHandler, HTTPServer
import time


class ImageSubscriber:

    def __init__(self, topic):

        self.topic = topic
        self.compressedImage = None

        self.__subscriber = rospy.Subscriber(
            topic, CompressedImage, self.__callback)

    def __callback(self, msg):
        self.compressedImage = msg


class MyServer(BaseHTTPRequestHandler):

    __subscribers = dict()

    def do_GET(self):

        img_path = self.path
        if img_path not in MyServer.__subscribers.keys():
            subscriber = ImageSubscriber(img_path)
            MyServer.__subscribers[img_path] = subscriber

        # check if there are images in the image subscriber
        subscriber = MyServer.__subscribers.get(img_path, None)
        if subscriber is not None:

            # see if there is image avaiable
            if subscriber.compressedImage is not None:
                self.send_response(200)
                self.send_header("Access-Control-Allow-Origin", "*")
                self.send_header("Content-type", "image/png")
                self.send_header("Cache-Control", "no-store, max-age=1")
                self.end_headers()
                self.wfile.write(bytes(subscriber.compressedImage.data))


def start_http_server():

    hostName = "0.0.0.0"
    serverPort = 8080
    webServer = HTTPServer((hostName, serverPort), MyServer)
    rospy.loginfo("Server started http://%s:%s" % (hostName, serverPort))

    try:
        webServer.serve_forever()
    except KeyboardInterrupt:
        pass

    webServer.server_close()


def main():

    rospy.init_node('camera_http_server')

    web_thread = threading.Thread(target=start_http_server, name='http_thread')
    web_thread.start()

    try:
        rospy.spin()
        web_thread.join(timeout=1.0)
    except KeyboardInterrupt():
        rospy.loginfo('camera_http_server: keyboard interrupt, shutting down')


if __name__ == "__main__":

    main()
