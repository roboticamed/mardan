#!/usr/bin/env python3

"""
camera: Camera publisher node

------------
Mode of use
------------
$ rosrun mardan camera _topic:=<image_topic> _camera:=<int> _resolution:=<[height, width]>

_topic: raw image topic path to publish, default 'roskeycar/camera/image_color/BGR/raw'
_camera: camera index, default 0
_resollution: output image resolution, default [320, 240]

"""

import threading
import rospy
import cv2

from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge

from aiohttp import web

import mardan.streaming.webrtc as webrtc


class CameraPublisher(object):

    def __init__(self,
                 topic='camera/BGR',
                 camindex=0,
                 resolution=(240, 320)):

        # creates a ROS publisher for compressed images
        self.__publisher = rospy.Publisher(topic + '/raw', Image, queue_size=1)
        self.__publisher_compressed = rospy.Publisher(
            topic + '/compressed', CompressedImage, queue_size=1)

        self.__capture = cv2.VideoCapture(camindex)
        if self.__capture is None:
            rospy.logerr('CameraPublisher: capture device not found')
            exit(-1)
        else:
            rospy.loginfo('CameraPublisher: capture device found')

        self.__capture.set(cv2.CAP_PROP_FRAME_WIDTH, resolution[1])
        self.__capture.set(cv2.CAP_PROP_FRAME_HEIGHT, resolution[0])

        self.__bridge = CvBridge()

        # external image callback. Can be set calling add_image_callback
        self.__image_callback = None

        rospy.loginfo('CameraPublisher: starting capture loop')
        self.__imgThread = threading.Thread(target=self.__imageLoop)
        self.__imgThread.start()

    def add_image_callback(self, callback):
        self.__image_callback = callback

    def __imageLoop(self):
        """
        Image acquisition and processing loop.

        This method constantly reads an image from the capture device and
        compresses it and publishes it in the ROS topic
        """

        self.__rate = rospy.Rate(25)

        while not rospy.is_shutdown():

            try:
                # reads a new image from the camera
                capture = self.__capture.read()[1]
                self.__imgBGR = cv2.rotate(capture, cv2.ROTATE_180)

                if self.__imgBGR is not None:

                    msg = self.__bridge.cv2_to_imgmsg(self.__imgBGR, "bgr8")
                    compressed_msg = self.__bridge.cv2_to_compressed_imgmsg(
                        self.__imgBGR, dst_format="png")

                    # publish the image to raw and compressed topics
                    self.__publisher.publish(msg)
                    self.__publisher_compressed.publish(compressed_msg)

                    if self.__image_callback is not None:
                        self.__image_callback(self.__imgBGR)

                else:
                    rospy.logerr(
                        'CameraPublisher: error: no image read from camera')

                self.__rate.sleep()

            except Exception as e:
                rospy.logerr(
                    'CameraPublisher: error reading image frame: {0}'.format(e))


class ImageCallback(object):

    def __init__(self, video_track):
        self.__video_track = video_track

    def __call__(self, img):
        self.__video_track.update(img)


def ros_thread(topic, camindex, resolution, image_callback):

    camera_publisher = CameraPublisher(topic, camindex, resolution)
    camera_publisher.add_image_callback(image_callback)

    try:
        rospy.spin()
    except KeyboardInterrupt:
        rospy.loginfo('camera_processing: keyboard interrupt, shutting down')


###########################################################
# ENTRY POINT
###########################################################
if __name__ == '__main__':

    # init ros node
    rospy.init_node('camera')

    rospy.loginfo('camera: start')

    # read node parameters
    topic = rospy.get_param('camera_processing/topic', 'camera/BGR')
    camindex = rospy.get_param('camera_processing/camera', 0)
    resolution = rospy.get_param('camera_processing/resolution', [240, 320])

    rospy.loginfo('topic name: {0}'.format(topic))
    rospy.loginfo('camera index: {0}'.format(camindex))
    rospy.loginfo('image resolution: {0}'.format(resolution))

    # WebRTC track for publishing the camera image
    video_track = webrtc.RawVideoTrack(resolution)
    image_callback = ImageCallback(video_track)

    camera_thread_handler = threading.Thread(
        target=ros_thread,
        args=(topic, camindex, resolution, image_callback,))

    camera_thread_handler.start()

    # TODO: ros hook on shutdown

    #######################################################
    # NOTE: The WebRTC server must run in the main Thread
    #       Otherwise, some RuntimeError appears during
    #       the execution.
    app = web.Application()
    webrtc_server = webrtc.WebRTCServer(app)
    webrtc_server.add_video_track(video_track)
    web.run_app(app, host='0.0.0.0', port=8080, ssl_context=None)
